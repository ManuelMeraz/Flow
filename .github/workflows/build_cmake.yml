name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]

    steps:
    - uses: actions/checkout@v2

    - name: Git submodules
      run: git submodule update --init --recursive

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install conan
        source ~/.profile

    - name: Install GCC 10
      shell: bash
      run: |
       sudo apt install -qq -y build-essential g++-10 gcc-10
       sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

    - name: Install liburing
      shell: bash
      working-directory: scripts
      run: |
        cd /tmp || exit 1
        git clone https://github.com/axboe/liburing.git
        cd liburing || exit 1
        ./configure
        make -j4
        sudo make install

    - name: Install cppcoro
      shell: bash
      working-directory: scripts
      run: |
        cd /tmp || exit 1
        git clone https://github.com/Garcia6l20/cppcoro.git
        cd cppcoro || exit 1
        mkdir build
        cd build || exit 1
        cmake -DCMAKE_BUILD_TYPE=Debug ..
        make -j4

        sudo cp ./lib/libcppcoro.a /usr/local/lib
        sudo cp -r ../include/* /usr/local/include

        cd ~ || exit 1

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      # 
      # We need to source the profile file to make sure conan is in PATH
      run: |
        source ~/.profile
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute unit_tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --repeat-until-fail 500 --output-on-failure -C $BUILD_TYPE 
